// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of all created shortened links.
	// (GET /shortener)
	GetShortener(c *fiber.Ctx) error
	// Generate a shortened URL.
	// (POST /shortener)
	PostShortener(c *fiber.Ctx) error
	// Return statistics for a shortened URL.
	// (GET /stats/{link})
	GetStatsLink(c *fiber.Ctx, link string) error
	// Delete a shortened URL.
	// (DELETE /{link})
	DeleteLink(c *fiber.Ctx, link string) error
	// Redirects to the original URL based on the short link.
	// (GET /{link})
	GetLink(c *fiber.Ctx, link string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetShortener operation middleware
func (siw *ServerInterfaceWrapper) GetShortener(c *fiber.Ctx) error {

	return siw.Handler.GetShortener(c)
}

// PostShortener operation middleware
func (siw *ServerInterfaceWrapper) PostShortener(c *fiber.Ctx) error {

	return siw.Handler.PostShortener(c)
}

// GetStatsLink operation middleware
func (siw *ServerInterfaceWrapper) GetStatsLink(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "link" -------------
	var link string

	err = runtime.BindStyledParameterWithOptions("simple", "link", c.Params("link"), &link, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter link: %w", err).Error())
	}

	return siw.Handler.GetStatsLink(c, link)
}

// DeleteLink operation middleware
func (siw *ServerInterfaceWrapper) DeleteLink(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "link" -------------
	var link string

	err = runtime.BindStyledParameterWithOptions("simple", "link", c.Params("link"), &link, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter link: %w", err).Error())
	}

	return siw.Handler.DeleteLink(c, link)
}

// GetLink operation middleware
func (siw *ServerInterfaceWrapper) GetLink(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "link" -------------
	var link string

	err = runtime.BindStyledParameterWithOptions("simple", "link", c.Params("link"), &link, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter link: %w", err).Error())
	}

	return siw.Handler.GetLink(c, link)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/shortener", wrapper.GetShortener)

	router.Post(options.BaseURL+"/shortener", wrapper.PostShortener)

	router.Get(options.BaseURL+"/stats/:link", wrapper.GetStatsLink)

	router.Delete(options.BaseURL+"/:link", wrapper.DeleteLink)

	router.Get(options.BaseURL+"/:link", wrapper.GetLink)

}

type GetShortenerRequestObject struct {
}

type GetShortenerResponseObject interface {
	VisitGetShortenerResponse(ctx *fiber.Ctx) error
}

type GetShortener200JSONResponse LinkListResponse

func (response GetShortener200JSONResponse) VisitGetShortenerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetShortener400JSONResponse BadRequest

func (response GetShortener400JSONResponse) VisitGetShortenerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetShortener404JSONResponse NotFound

func (response GetShortener404JSONResponse) VisitGetShortenerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetShortener500JSONResponse InternalServerError

func (response GetShortener500JSONResponse) VisitGetShortenerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type PostShortenerRequestObject struct {
	Body *PostShortenerJSONRequestBody
}

type PostShortenerResponseObject interface {
	VisitPostShortenerResponse(ctx *fiber.Ctx) error
}

type PostShortener200JSONResponse ShortenerPostResponse

func (response PostShortener200JSONResponse) VisitPostShortenerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type PostShortener400JSONResponse BadRequest

func (response PostShortener400JSONResponse) VisitPostShortenerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostShortener500JSONResponse InternalServerError

func (response PostShortener500JSONResponse) VisitPostShortenerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetStatsLinkRequestObject struct {
	Link string `json:"link"`
}

type GetStatsLinkResponseObject interface {
	VisitGetStatsLinkResponse(ctx *fiber.Ctx) error
}

type GetStatsLink200JSONResponse LinkItem

func (response GetStatsLink200JSONResponse) VisitGetStatsLinkResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetStatsLink404JSONResponse NotFound

func (response GetStatsLink404JSONResponse) VisitGetStatsLinkResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetStatsLink500JSONResponse InternalServerError

func (response GetStatsLink500JSONResponse) VisitGetStatsLinkResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteLinkRequestObject struct {
	Link string `json:"link"`
}

type DeleteLinkResponseObject interface {
	VisitDeleteLinkResponse(ctx *fiber.Ctx) error
}

type DeleteLink200JSONResponse Ok

func (response DeleteLink200JSONResponse) VisitDeleteLinkResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type DeleteLink404JSONResponse NotFound

func (response DeleteLink404JSONResponse) VisitDeleteLinkResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteLink500JSONResponse InternalServerError

func (response DeleteLink500JSONResponse) VisitDeleteLinkResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetLinkRequestObject struct {
	Link string `json:"link"`
}

type GetLinkResponseObject interface {
	VisitGetLinkResponse(ctx *fiber.Ctx) error
}

type GetLink302ResponseHeaders struct {
	Location RedirectResponse
}

type GetLink302Response struct {
	Headers GetLink302ResponseHeaders
}

func (response GetLink302Response) VisitGetLinkResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Location", fmt.Sprint(response.Headers.Location))
	ctx.Status(302)
	return nil
}

type GetLink404JSONResponse NotFound

func (response GetLink404JSONResponse) VisitGetLinkResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetLink500JSONResponse InternalServerError

func (response GetLink500JSONResponse) VisitGetLinkResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List of all created shortened links.
	// (GET /shortener)
	GetShortener(ctx context.Context, request GetShortenerRequestObject) (GetShortenerResponseObject, error)
	// Generate a shortened URL.
	// (POST /shortener)
	PostShortener(ctx context.Context, request PostShortenerRequestObject) (PostShortenerResponseObject, error)
	// Return statistics for a shortened URL.
	// (GET /stats/{link})
	GetStatsLink(ctx context.Context, request GetStatsLinkRequestObject) (GetStatsLinkResponseObject, error)
	// Delete a shortened URL.
	// (DELETE /{link})
	DeleteLink(ctx context.Context, request DeleteLinkRequestObject) (DeleteLinkResponseObject, error)
	// Redirects to the original URL based on the short link.
	// (GET /{link})
	GetLink(ctx context.Context, request GetLinkRequestObject) (GetLinkResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetShortener operation middleware
func (sh *strictHandler) GetShortener(ctx *fiber.Ctx) error {
	var request GetShortenerRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetShortener(ctx.UserContext(), request.(GetShortenerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetShortener")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetShortenerResponseObject); ok {
		if err := validResponse.VisitGetShortenerResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostShortener operation middleware
func (sh *strictHandler) PostShortener(ctx *fiber.Ctx) error {
	var request PostShortenerRequestObject

	var body PostShortenerJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostShortener(ctx.UserContext(), request.(PostShortenerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostShortener")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostShortenerResponseObject); ok {
		if err := validResponse.VisitPostShortenerResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetStatsLink operation middleware
func (sh *strictHandler) GetStatsLink(ctx *fiber.Ctx, link string) error {
	var request GetStatsLinkRequestObject

	request.Link = link

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetStatsLink(ctx.UserContext(), request.(GetStatsLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStatsLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetStatsLinkResponseObject); ok {
		if err := validResponse.VisitGetStatsLinkResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteLink operation middleware
func (sh *strictHandler) DeleteLink(ctx *fiber.Ctx, link string) error {
	var request DeleteLinkRequestObject

	request.Link = link

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLink(ctx.UserContext(), request.(DeleteLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteLinkResponseObject); ok {
		if err := validResponse.VisitDeleteLinkResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetLink operation middleware
func (sh *strictHandler) GetLink(ctx *fiber.Ctx, link string) error {
	var request GetLinkRequestObject

	request.Link = link

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetLink(ctx.UserContext(), request.(GetLinkRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetLink")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetLinkResponseObject); ok {
		if err := validResponse.VisitGetLinkResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+V4jbHmVL/pF10duKbV2GYC2S7mVFEFDi2WYtkSp5CuoF+t8LUrZsWXLj",
	"JC7QAnlqZR3vvrv77uMp95DqvNAKFVmI78GmC8y5/+9rLq7wU4mW3JNAmxpZkNQKYvjDGG0ggMLoAg1J",
	"9CdSLdD9i595XmQI8TSKAqBVgRCDVIRzNFAFkKO1fN42hYQLZtbxmkOWjFRzqKoA3DtpUED8oXEQ1CFv",
	"GnudfMSUXIwLRWgUz67R3KGp8XbS2Bgx660YHpfW2SPSkgdCPDvBS6mWF4S5C9fGy9MUrb1NdamoBea8",
	"D3VqkBOKW962hXE0ng5Go8Eoej86iydRHEX/QQAzbXJnCoITDkjm2E0mAIEZfs3p+OwJTvFzIQ0e8Dl+",
	"GlAp2s7Ok5HAZCoGk+SVGEwTLgbniRCDcRKJV8lEpMkvos9Pxi3d1oU/UManZGwX2tBtJtWy7XRBVNg4",
	"DHNMF8SHy//Dyervv6K7uz4nxM0c6bY02UNOCqNFmVKoeD+cshD8xF3d4730xd0CbpWgxdVdOgRtyreA",
	"HhqdS2npCm2hlcWuMJjNmwAkYe57+rPBGcTwU7hVzHAtl2EzjFUTjhvDV+75H01/6lKJbhSlic38qyOU",
	"dHq05Oy6fbbMvF12cV+XNdEfRD1+hFDq5SngXqGQBtNWax9B+YaypZF9E3Dt2IgKzTvt6HPgdlxfYyzR",
	"YtUp0pq2gq/aSjHqLdWzp3avhPVQ7WLoq+JemkdMSTvHE+jWHu4dj13AzliqmXbBSJIP1aTAfnt3AQHc",
	"obE16tEwGkYuS12g4oWEGCb+pwAKTgufQGg3x93THH2TXYbcpX4hIIY3SE0MCJpa+OPjKKrnQRHWdzAv",
	"ikym/nT40Tocm13rGGlpiZVPt90Iux7IKoDpCUPvbIA9QXcXNh94erLAjWT2hN2qWxXA2Qmz7dsYe+L3",
	"L3TOzpZ5zs0KYnD9YnrGeJax9Z3FNowSzLHYDh38QtseZrmha1PLF/m1U5NTJdsrZFV76siUWH1DZver",
	"zHdK7++UaW9c/Tgh4zsE+/fqcujtQkucbHjvGFd9Vcmc3WW9ZBXc8BwJjYX4w77kv18gK5X8VCKTAhXJ",
	"mUTjqE4LbCNwq5M74TQVAvC3UwzrRa5NsmCnbtvLYn012J674eYb6229yj1AxBe525DwCqk0ijmySUsy",
	"tWymzQFGbrlYfyN26fi7//20ZGSk2TreD0rLt8sXQh5NyJpCPQwMDirgjyt+k2jcXc0330GO+A6dNnIu",
	"XdVqcAvkwud4D5e67tbxjep8Y1W+TS8E3FXEukS2r/4s4RYF02rLG78TDutotds+/rlWZUzgHWa6yLH+",
	"U4f7QPQfVnEYZs5goS3Fv0ZRBNVN9SUAAP//QKBJ7eAVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
